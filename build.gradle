buildscript {
    ext {
        springBootVersion = "2.0.1.RELEASE"
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.6"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'idea'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

configurations {
    // Only needed if restdocs sources are used across projects (e.g. awp-spring-boot-common could have commonly
    // used classes that are needed in dependent projects
    //restdocsOutput
    jsondoclet
}

dependencyManagement {
    /**
     * uses curated versions of various libraries selected by spring boot, since all production apps in this repo
     * uses spring boot, it makes sense to use versions that are known to work together rather than specify our
     * own versions. Before adding our own versions of any library, first check to see if one has already been
     * selected by spring boot's POM by visiting (replace $springBootVersion):
     * https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent/$springBootVersion
     *
     * And think twice before overriding it as it may conflict with other parts of spring boot
     */
    imports {
        mavenBom "org.springframework.boot:spring-boot-starter-parent:$springBootVersion"
    }

    dependencies {
        dependencySet(group: 'capital.scalable', version: '2.0.1') {
            entry 'spring-auto-restdocs-docs'
            entry 'spring-auto-restdocs-json-doclet'
            entry 'spring-auto-restdocs-core'
        }
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-actuator' // adds some nice to haves, like the /health endpoint
    compile 'org.springframework.boot:spring-boot-starter-data-jpa' // adds jpa capability for db crud operations
    compile 'org.springframework.boot:spring-boot-devtools' // needed to enable h2 console (debug use only)
    compile 'org.springframework.boot:spring-boot-starter-web' // adds tomcat

    // needed to use h2 database. If using mysql, swap this out with compile("mysql:mysql-connector-java:5.1.40")
    runtime 'com.h2database:h2'

    // needed for liquibase
    runtime 'org.liquibase:liquibase-core'
    runtime 'org.liquibase:liquibase-groovy-dsl:1.2.2' // needed if we want to use groovy instead of xml for liquibase

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.restdocs:spring-restdocs-core'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile 'capital.scalable:spring-auto-restdocs-core'

    jsondoclet 'capital.scalable:spring-auto-restdocs-json-doclet'
}

bootRun {
    systemProperties = System.properties // allows passing in spring profiles
}

bootJar {
    launchScript()
}

group = 'com.awarepoint'
// Jenkins should pass in this property during the ci build with the Jenkins build number
// (e.g. gradle -Pver=1.100.${BUILD_NUMBER} clean build uploadArchives) so the "version" variable is populated
// the version string is important, as the default behavior is to use it to populate the version in the jar name
// (jar.version), and the version in the exported POM file (uploadArchives.repositories.mavenDeployer.pom.version)
if (project.hasProperty('ver')) {
    version = project.ver
} else {
    version = project.DEFAULT_VERSION
}

// rest docs
jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

ext {
    snippetsDir = file("$buildDir/generated-snippets")
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
}

task jsonDoclet(type: Javadoc, dependsOn: compileJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir
    options.docletpath = configurations.jsondoclet.files.asType(List)
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

test {
    outputs.dir snippetsDir

    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir

    dependsOn jsonDoclet
}

asciidoctor {
    sourceDir = file('src/test/resources/restdocs')
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputs.dir snippetsDir
    dependsOn test
}
